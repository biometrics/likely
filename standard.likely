-- Likely Standard Library

-- Type abbreviations
null = likely.null
depth = likely.depth
signed = likely.signed
floating = likely.floating
u8 = likely.u8
u16 = likely.u16
u32 = likely.u32
u64 = likely.u64
i8 = likely.i8
i16 = likely.i16
i32 = likely.i32
i64 = likely.i64
f16 = likely.f16
f32 = likely.f32
f64 = likely.f64
parallel = likely.parallel
multi_channel = likely.multi_channel
multi_column = likely.multi_column
multi_row = likely.multi_row
multi_frame = likely.multi_frame
saturation = likely.saturation
reserved = likely.reserved

-- Core functions
closure = likely.closure

new = closure(
  "new",
  nil,
  "Create an empty matrix",
  {{"type", "matrix type", f32},
   {"channels", "matrix channels", 1},
   {"columns", "matrix columns", 1},
   {"rows", "matrix rows", 1},
   {"frames", "matrix frames", 1},
   {"data", "address of existing data buffer", 0},
   {"copy", "copy the data buffer", false}},
  likely.new)

scalar = closure(
  "scalar",
  nil,
  "Create a matrix from a number",
  {{"value", "matrix value"}},
  likely.scalar)

read = closure(
  "read",
  nil,
  "Create a matrix from a file",
  {{"file_name", "path to file on disk"}},
  likely.read)

compile = closure(
  "compile",
  nil,
  "Create kernel",
  {{"function", "function expression"}},
  likely.compile)

-- Examples
likely.examples =
{
[[
-- Hello World
-- Source code is re-executed as you type\dream{activate:message}
message = "Hello World!"

-- \dream{CTRL}+click variables to display values
lenna = read("img/Lenna.tiff")

-- \dream{CTRL}+scroll to edit numerical constants
dark_lenna = divide(2)(lenna)
]],
[[
-- Function Calls
-- Arguments can be assigned explicitly by name...\dream{activate:new}
x = new{rows=512, columns=512, type=f32}

-- ...or anonymously in their canonical order.
y = new(f32, 1, 512, 512)

-- In the latter case, arguments are assigned to the first parameter without a default value. If all parameters have default values then arguments will replace the left-most values.
]],
[[
-- Closures
x = new{rows=512, columns=512, type=i8}

-- When a function is called without all of its arguments specified, a new function is returned with the bound arguments.\dream{activate:set}\dream{activate:setZero}
setZero = set(0)

-- Once all the arguments have been provided, the function is compiled and executed.\dream{activate:y}
y = setZero(x)

-- set(0)(x)
--     ^  ^
--     |  Run-time arguments
--     Compile-time arguments
]],
[[
-- Arithmetic
lenna = read("img/Lenna.tiff")

-- Saturation arithmetic is part of the type system
lenna.saturation = true

-- Likely will automatically apply operations to all elements in a matrix
added = add(32)(lenna)
subtracted = subtract(32)(lenna)
multiplied = multiply(2)(lenna)
divided = divide(2)(lenna)
]]
}

-- Utility functions
function likely.s(...)
  return "(" .. table.concat({...}, " ") .. ")"
end

function likely.isnum(...)
  for k,v in ipairs{...} do
    if type(v) ~= "number" then
      return false
    end
  end
  return true
end

-- Basic arithmetic
set = closure(
  "set",
  function(value, matrix)
    return value
  end,
  "Assignment",
  {{"value", "numerical constant"},
   {"matrix", "used to determine output size and type"}})

add = closure(
  "add",
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs + rhs
    elseif rhs == 0 then
      return lhs
    elseif lhs == 0 then
      return rhs
    else
      return likely.s("+", lhs, rhs)
    end
  end,
  "Arithmetic addition",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

subtract = closure(
  "subtract",
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs - rhs
    elseif lhs == 0 then
      return rhs
    else
      return likely.s("-", lhs, rhs)
    end
  end,
  "Arithmetic subtraction",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

multiply = closure(
  "multiply",
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs * rhs
    elseif rhs == 1 then
      return lhs
    elseif lhs == 1 then
      return rhs
    else
      return likely.s("*", lhs, rhs)
    end
  end,
  "Arithmetic multiplication",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

divide = closure(
  "divide",
  function(rhs, lhs)
    if rhs == 0 then
      error("Denominator is zero!")
    elseif likely.isnum(rhs, lhs) then
      return lhs / rhs
    elseif rhs == 1 then
      return lhs
    else
      return likely.s("/", lhs, rhs)
    end
  end,
  "Arithmetic division",
  {{"lhs", "left hand side (denominator)"},
   {"rhs", "right hand side (numerator)"}})

-- Basic math
sqrt = closure(
  "sqrt",
  function(x)
    if likely.isnum(x) then
      return math.sqrt(x)
    else
      return likely.s("sqrt", x)
    end
  end,
  "Square root: f(x) = x ** 0.5",
  {{"x", "operand"}})

powi = closure(
  "powi",
  function(n, x)
    if likely.isnum(n, x) then
      return math.pow(x, n)
    else
      return likely.s("powi", x, n)
    end
  end,
  "Integer power: f(x) = x ** n",
  {{"x", "base"},
   {"n", "integer exponent"}})

sin = closure(
  "sin",
  function(x)
    if likely.isnum(x) then
      return math.sin(x)
    else
      return likely.s("sin", x)
    end
  end,
  "Sine: f(x) = sin(x)",
  {{"x", "radians"}})

cos = closure(
  "cos",
  function(x)
    if likely.isnum(x) then
      return math.cos(x)
    else
      return likely.s("cos", x)
    end
  end,
  "Cosine: f(x) = cos(x)",
  {{"x", "operand"}})

pow = closure(
  "pow",
  function(n, x)
    if likely.isnum(n, x) then
      return math.pow(x, n)
    else
      return likely.s("pow", x, n)
    end
  end,
  "Power: f(x) = x ** n",
  {{"x", "base"},
   {"n", "exponent"}})

exp = closure(
  "exp",
  function(x)
    if likely.isnum(x) then
      return math.exp(x)
    else
      return likely.s("exp", x)
    end
  end,
  "Base-e exponential: f(x) = e ** x",
  {{"x", "exponent"}})

exp2 = closure(
  "exp2",
  function(x)
    if likely.isnum(x) then
      return math.pow(2, x)
    else
      return likely.s("exp2", x)
    end
  end,
  "Base-2 exponential: f(x) = 2 ** x",
  {{"x", "exponent"}})

log = closure(
  "log",
  function(x)
    if likely.isnum(x) then
      return math.log(x)
    else
      return likely.s("log", x)
    end
  end,
  "Natural logarithm: f(x) = log_e(x)",
  {{"x", "operand"}})

log10 = closure(
  "log10",
  function(x)
    if likely.isnum(x) then
      return math.log10(x)
    else
      return likely.s("log10", x)
    end
  end,
  "Base-10 logarithm: f(x) = log_10(x)",
  {{"x", "operand"}})

log2 = closure(
  "log2",
  function(x)
    if likely.isnum(x) then
      return math.log(x) / math.log(2)
    else
      return likely.s("log2", x)
    end
  end,
  "Base-2 logarithm: f(x) = log_2(x)",
  {{"x", "operand"}})

fma = closure(
  "fma",
  function(a, c, x)
    if likely.isnum(a, c, x) then
      return a * x + c
    else
      return likely.s("fma", a, x, c)
    end
  end,
  "Fused multiply-add: f(a, b, x) = a * x + c",
  {{"a", "operand"},
   {"c", "operand"},
   {"x", "operand"}})

fabs = closure(
  "fabs",
  function(x)
    if likely.isnum(x) then
      return math.abs(x)
    else
      return likely.s("fabs", x)
    end
  end,
  "Floating absolute value: f(x) = |x|",
  {{"x", "operand"}})

copysign = closure(
  "copysign",
  function(s, m)
    if likely.isnum(s, m) then
      return m * s / math.abs(s)
    else
      return likely.s("copysign", m, s)
    end
  end,
  "Floating copy sign: f(x) = copysign(m, s)",
  {{"s", "value containing sign"},
   {"m", "value containing magnitude"}})

floor = closure(
  "floor",
  function(x)
    if likely.isnum(x) then
      return math.floor(x)
    else
      return likely.s("floor", x)
    end
  end,
  "Floating floor: f(x) = floor(x)",
  {{"x", "operand"}})

ceil = closure(
  "ceil",
  function(x)
    if likely.isnum(x) then
      return math.floor(x)
    else
      return likely.s("ceil", x)
    end
  end,
  "Floating ceil: f(x) = ceil(x)",
  {{"x", "operand"}})

trunc = closure(
  "trunc",
  function(x)
    if likely.isnum(x) then
      if x > 0 then
        return math.floor(x)
      else
        return math.ceil(x)
      end
    else
      return likely.s("trunc", x)
    end
  end,
  "Floating round toward zero: f(x) = x > 0 ? floor(x) : ceil(x)",
  {{"x", "operand"}})

rint = closure(
  "rint",
  function(x)
    if likely.isnum(x) then
      return math.round(x)
    else
      return likely.s("rint", x)
    end
  end,
  "Floating round to nearest integer: f(x) = rint(x)",
  {{"x", "operand"}})

nearbyint = closure(
  "nearbyint",
  function(x)
    if likely.isnum(x) then
      return math.round(x)
    else
      return likely.s("nearbyint", x)
    end
  end,
  "Floating round to nearest integer: f(x) = nearbyint(x)",
  {{"x", "operand"}})

round = closure(
  "round",
  function(x)
    if likely.isnum(x) then
      return math.round(x)
    else
      return likely.s("round", x)
    end
  end,
  "Floating round to nearest integer: f(x) = round(x)",
  {{"x", "operand"}})

cast = closure(
  "cast",
  function(type, x)
    return likely.s("cast", x, type)
  end,
  "Cast matrix to another type",
  {{"type", "Likely type"},
   {"x", "operand"}})

threshold = closure(
  "threshold",
  function(x, threshVal)
    return likely.s("threshold", x, threshVal)
  end,
  "Threshold the image at the threshold value",
  {{"threshValue", "Threshold value"},
   {"x", "operand"}})
