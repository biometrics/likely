-- Likely Standard Library

-- Spaces are used to separate tokens in the Likely intermediate representation
function likely.concat(...)
  return table.concat({...}, " ")
end

function likely.copy(t)
  local t2 = {}
  for k,v in pairs(t) do
    t2[k] = v
  end
  return t2
end

function likely.isnum(...)
  for k,v in ipairs{...} do
    if type(v) ~= "number" then
      return false
    end
  end
  return true
end

console = ""
function likely.print(...)
  if #console > 0 then
    console = console .. "\n"
  end
  args = {...}
  for k,v in ipairs(args) do
    console = console .. v
    if k ~= #args then
      console = console .. " "
    end
  end
end
print = likely.print

-- Setup function abstractions
likely.func_mt = {}

function likely.func_mt.__call(f, ...)
  -- Likely functions support both regular Lua function call syntax and single argument tables,
  -- this code must disambiguate between the two and order named arguments appropriately.
  local allArgs = likely.copy(f.args)
  local offset = #f.args
  local args = {...}
  if #args == 1 and type(args[1]) == "table" then
    args = args[1]
  end

  needsCompilation = false
  for k,v in pairs(args) do
    if type(v) == "userdata" then
      needsCompilation = needsCompilation or (v.likely == "matrix")
    end
  end

  if needsCompilation then
    if not f.binary then
      f.binary = likely.compile(f, ...)
    end
    return f.binary(...)
  else
    for k,v in pairs(args) do
      if type(k) == "number" then
        allArgs[offset+k] = v
      else
        allArgs[f.parameterLUT[k]] = v
      end
    end

    if #allArgs >= #f.parameters then
      return f.source(unpack(allArgs))
    else
      -- Return a new function that binds these arguments
      return likely.func(f.source, f.documentation, f.parameters, allArgs)
    end
  end
end

function likely.func(source, documentation, parameters, args)
  local t = {}
  t.likely = "function"
  t.source = source
  t.documentation = documentation
  t.parameters = parameters  
  t.parameterLUT = {}
  for k,v in pairs(parameters) do
    t.parameterLUT[v[1]] = k
  end

  t.args = {}
  if type(args) == "table" then
    for k,v in pairs(args) do
      if type(k) == "number" then
        t.args[k] = v
      else
        t.args[t.parameterLUT[k]] = v
      end
    end
  end

  t.arity = #t.parameters - #t.args
  t.binary = nil
  setmetatable(t, likely.func_mt)
  return t
end

-- Shorthand for Likely global functions
func = likely.func
new = func(likely.new,
           "Create an empty matrix",
           {{"hash", "matrix hash"},
            {"channels", "matrix channels"},
            {"columns", "matrix columns"},
            {"rows", "matrix rows"},
            {"frames", "matrix frames"},
            {"data", "address of existing data buffer"},
            {"clone", "copy the data buffer"}})
read = func(likely.read,
            "Create a matrix from a file",
            {{"file_name", "path to file on disk"}})
compile = func(likely.compile,
               "Create kernel",
               {{"function", "function expression"},
                {"...", "matricies to initialize the function"}})

-- Basic arithmetic
add = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs + rhs
    else
      return likely.concat(lhs, rhs, "+")
    end
  end,
  "Arithmetic addition",
  {{"rhs", "right hand side"},
  {"lhs", "left hand side"}})

subtract = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs - rhs
    else
      return likely.concat(lhs, rhs, "-")
    end
  end,
  "Arithmetic subtraction",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

multiply = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs * rhs
    else
      return likely.concat(lhs, rhs, "*")
    end
  end,
  "Arithmetic multiplication",
  {{"rhs", "right hand side"},
  {"lhs", "left hand side"}})

divide = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return lhs / rhs
    else
      return likely.concat(lhs, rhs, "/")
    end
  end,
  "Arithmetic division",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

-- Basic math
log = func(
  function(operand)
    if likely.isnum(operand) then
      return log(operand)
    else
      return likely.concat(operand, "log")
    end
  end,
  "Logarithmic function",
  {{"operand", "operand"}})

log2 = func(
  function(operand)
    if likely.isnum(operand) then
      return log2(operand)
    else
      return likely.concat(operand, "log2")
    end
  end,
  "Logarithmic function with base 2",
  {{"operand", "operand"}})

log10 = func(
  function(operand)
    if likely.isnum(operand) then
      return log10(operand)
    else
      return likely.concat(operand, "log10")
    end
  end,
  "Logarithmic function with base of 10",
  {{"operand", "operand"}})

sin = func(
  function(operand)
    if likely.isnum(operand) then
      return sin(operand)
    else
      return likely.concat(operand, "sin")
    end
  end,
  "Sine function",
  {{"operand", "operand"}})

cos = func(
  function(operand)
    if likely.isnum(operand) then
      return cos(operand)
    else
      return likely.concat(operand, "cos")
    end
  end,
  "Cosine function",
  {{"operand", "operand"}})

fabs = func(
  function(operand)
    if likely.isnum(operand) then
      return fabs(operand)
    else
      return likely.concat(operand, "fabs")
    end
  end,
  "Absolute Value function",
  {{"operand", "operand"}})

sqrt = func(
  function(operand)
    if likely.isnum(operand) then
      return sqrt(operand)
    else
      return likely.concat(operand, "sqrt")
    end
  end,
  "Square Root function",
  {{"operand", "operand"}})

exp = func(
  function(operand)
    if likely.isnum(operand) then
      return exp(operand)
    else
      return likely.concat(operand, "exp")
    end
  end,
  "Exponential function",
  {{"operand", "operand"}})

pow = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return pow(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "pow")
    end
  end,
  "Power Function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

-- Casting functions
zext = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return zext(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "zext")
    end
  end,
  "Zero extend function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

sext = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return sext(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "sext")
    end
  end,
  "Sign extend function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

fpext = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return fpext(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "fpext")
    end
  end,
  "Floating point extend function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

trunc = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return trunc(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "trunc")
    end
  end,
  "Truncate function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

fptrunc = func(
  function(rhs, lhs)
    if likely.isnum(rhs, lhs) then
      return fptrunc(lhs, rhs)
    else
      return likely.concat(lhs, rhs, "fptrunc")
    end
  end,
  "Floating point truncate function",
  {{"rhs", "right hand side"},
   {"lhs", "left hand side"}})

fp = func(
  function(operand)
    if likely.isnum(operand) then
      return fp(operand)
    else
      return likely.concat(operand, "fp")
    end
  end,
  "Cast to floating point",
  {{"operand", "operand"}})

i = func(
  function(operand)
    if likely.isnum(operand) then
      return i(operand)
    else
      return likely.concat(operand, "i")
    end
  end,
  "Cast to signed integer",
  {{"operand", "operand"}})

u = func(
  function(operand)
    if likely.isnum(operand) then
      return u(operand)
    else
      return likely.concat(operand, "u")
    end
  end,
  "Cast to an unsigned integer",
  {{"operand", "operand"}})
